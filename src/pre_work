#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# @file: data_analysis.py

from __future__ import division
import sys

import ngram
import nltk
import string
import sqlite3
from config import *

pjoin = os.path.join


def count():
    """
    Results:

    train: 11701890
    existed: 355
    dev: 1000
    existed ratio: 0.355
    """
    max_len = 0;
    fileName = train_click_log
    """fileName = '/home/lql/python/input.txt'"""
    with open(train_click_log, 'r') as f:
        for line in f:
            arr = line.strip().split('\t')
            query = arr[1].strip()
            l = len(query)
            if l > max_len:
                max_len = l
    print max_len

def make_qitable():
    print 'make qitable'
    qit = '../database/query_image_table.db3'
    con = sqlite3.connect(qit)
    cur = con.cursor()
    cur.execute('CREATE TABLE qit(query TEXT, image TEXT, click INTEGER)')
    con.commit()
    fileName = train_click_log
    #num = 0
    with open(fileName, 'r') as f:
        for line in f:
            #num = num + 1
            arr = line.strip().split('\t')
            image = '"%s"' % arr[0].strip()
            #'"%s, %s"' % (1, 2)
            #image = '"' + arr[0].strip() + '"'
            query = '"%s"' % arr[1].strip().replace('"', '')
            click = arr[2].strip()
            cmd = 'INSERT INTO qit(query, image, click) VALUES(%s,%s,%s)' %(query,image,click)
            #print num, ':', cmd
            cur.execute(cmd)
            #if num > 100:
            #    break
    con.commit()

def get_r(k):
    return k

def get_table(query):
    print 'test qitable'
    qit = '../database/query_image_table.db3'
    con = sqlite3.connect(qit)
    cur = con.cursor()
    cmd = 'select * from qit where query=%s' %query
    print cmd
    cur.execute(cmd)
    num = 0
    ave = 0
    dic = {}
    for row in cur:
        num = num + 1
        ave = ave + get_r(row[2])
        #print row[0],',',row[1],',',row[2]
        dic[row[1]] = get_r(row[2])
    ave = ave / num
    r = (query, num, ave, dic)
    return r

if __name__ == "__main__":
    # query_existed()
    # query_search_test()
    query = '\"black history month\"'
    r = get_table(query)
    print r[0]
    print r[1]
    print r[2]
    dic = r[3]
    print "images"
    for image in dic.keys():
        print image
    print "clicks"
    for click in dic.values():
        print click
